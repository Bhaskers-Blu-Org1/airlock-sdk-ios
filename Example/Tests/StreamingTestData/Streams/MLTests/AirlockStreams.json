{
	"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
	"streams": [
		{
			"cacheSizeKB": null,
			"creationDate": 1506944576968,
			"creator": "Rachel Levy",
			"description": "PS-26\nCount: BAR event detail-viewed for name=go-run across a rolling 30 session window. \nResult schema includes \nCount: Integer\nLabel: \nIf 0 = gorun-none\nIf 1-3 = gorun-occasional\nIf 3+ = gorun-heavy",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\" && \nevent.eventData.name.toLowerCase() === \"go-run\") || \n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1509476918363,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "GoRunUsage",
			"owner": null,
			"processor": "MAX_SESSIONS = 30;\r\n\r\nif (cache.sessions === undefined) {\r\n    trace(\"sessions undefined\");\r\n    cache.sessions = [];\r\n} else{\r\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\r\n}\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\nsessions = sortEventsInBuckets(sessions, events, \"detail-viewed\", \"go-run\");\r\n\/\/cleanup\r\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \r\n\/\/count\r\nvar eventsCount = countEventsInBuckets(sessions);\r\n\r\n\/\/ update cache\r\ntrace(\"update cache\");\r\ncache.sessions = sessions\r\n\r\n\/\/update result\r\ntrace(\"update result\");\r\nresult.count = eventsCount;\r\nif (eventsCount === 0){\r\n    result.label = \"gorun-none\";\r\n}else if (eventsCount  <= 3){\r\n    result.label = \"gorun-occasional\";\r\n}else{\r\n    result.label = \"gorun-heavy\";\r\n}\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"count\": {\n            \"type\": \"number\"\n        },\n        \n        \"label\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "PRODUCTION",
			"uniqueId": "06d2cf76-5577-4fdf-a7e8-e4885e065a1a"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944626551,
			"creator": "Rachel Levy",
			"description": "PS-24\nCount: BAR event video-played with either:\nplayMethod of \"user\" or \"next-video-auto\"\nplayMethod of \"auto\" AND autoplayClicked=true\nAcross a rolling 30 session window\n\nResult schema includes \nCount: Integer\nLabel:\nIf 0 = video-none\nIf 1-3 = video-occasional\nIf 3+ = video-heavy",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"auto\" && \r\nevent.eventData.autoplayClicked === true) \r\n|| (event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"user\")\r\n|| (event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"next-video-auto\")\r\n|| (event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1509476926140,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "User Initiated Video Usage",
			"owner": null,
			"processor": "\r\nMAX_SESSIONS = 30;\r\nEVENT_NAME = \"video-played\";\r\nif (cache.sessions === undefined) {\r\n    trace(\"sessions undefined\");\r\n    cache.sessions = [];\r\n}\r\nelse{\r\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\r\n}\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\nsessions = sortEventsInBuckets(sessions, events, \"video-played\");\r\n\/\/cleanup\r\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \r\n\/\/count\r\nvar eventsCount = countEventsInBuckets(sessions);\r\n\r\n\/\/ update cache\r\ntrace(\"update cache\");\r\ncache.sessions = sessions\r\n\r\n\/\/update result\r\ntrace(\"update result\");\r\nresult.count = eventsCount;\r\nif (eventsCount === 0){\r\n    result.label = \"video-none\";\r\n}else if (eventsCount  <= 3){\r\n    result.label = \"video-occasional\";\r\n}else{\r\n    result.label = \"video-heavy\";\r\n}\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"count\": {\n            \"type\": \"number\"\n        },\n        \n        \"label\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "PRODUCTION",
			"uniqueId": "611f5f81-d368-43bd-8c4c-666405b9218d"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944668791,
			"creator": "Rachel Levy",
			"description": "PS-25\nCount: BAR event detail-viewed for name=allergy across a rolling 30 session window. \nResult schema includes \nCount: Integer\nLabel: \nIf 0  = allergy-none\nIf 1-3 = allergy-occasional\nIf 3+ = allergy-heavy",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\" && \nevent.eventData.name.toLowerCase() === \"allergy\") || \n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1509476932552,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "AllergyUsage",
			"owner": null,
			"processor": "\r\nMAX_SESSIONS = 30;\r\nif (cache.sessions === undefined) {\r\n    trace(\"sessions undefined\");\r\n    cache.sessions = [];\r\n} else {\r\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\r\n}\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\nsessions = sortEventsInBuckets(sessions, events, \"detail-viewed\", \"allergy\");\r\n\/\/cleanup\r\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \r\n\/\/count\r\nvar eventsCount = countEventsInBuckets(sessions);\r\n\r\n\/\/ update cache\r\ntrace(\"update cache\");\r\ncache.sessions = sessions\r\n\r\n\/\/update result\r\ntrace(\"update result\");\r\nresult.count = eventsCount;\r\nif (eventsCount === 0){\r\n    result.label = \"allergy-none\";\r\n}else if (eventsCount  <= 3){\r\n    result.label = \"allergy-occasional\";\r\n}else{\r\n    result.label = \"allergy-heavy\";\r\n}\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"count\": {\n            \"type\": \"number\"\n        },\n        \n        \"label\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "PRODUCTION",
			"uniqueId": "d77cad4d-8116-4989-bf8a-70c136c1dead"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944730390,
			"creator": "Rachel Levy",
			"description": "Number of active days the user had since the app was installed",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1507032271195,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "ActiveDaysCount",
			"owner": null,
			"processor": "\nif (cache.lastEpoch === undefined){\n    cache.lastEpoch = new Date(0);\n}\nif (cache.count === undefined){\n    cache.count = 0;\n}\n\nvar lastDate;\nvar lastYear;\nvar lastMonth;\nvar lastDay;\n\nupdateLastDate (cache.lastEpoch);\ntrace(\"lastDate = \" + cache.lastEpoch + \"lastYear = \" + lastYear + \" lastMonth \" +\n    lastMonth + \" lastDay \" +lastDay);\n\nfor (var e in events){\n    if (events[e].name === \"app-launch\"){\n        currentDate = new Date(events[e].dateTime);\n        trace(\"currentDate = \" + currentDate + \"Year = \" + currentDate.getFullYear() + \" Month \" +\n            currentDate.getMonth() + \" Day \" +currentDate.getDate() + \" minute = \" + currentDate.getMinutes());\n        if (currentDate.getDate() != lastDay || currentDate.getMonth() != lastMonth || \n        currentDate.getFullYear() != lastYear\n        ){\n            trace(\"newDay\");\n            cache.count = cache.count + 1;\n            updateLastDate(events[e].dateTime);\n        }\n        else{\n            trace(\"same day\");\n        }\n    }\n}\n\n\/\/update result\nresult.count = cache.count;\n\nfunction updateLastDate(dateInMs){\n    cache.lastEpoch = dateInMs;\n     lastDate  = new Date(dateInMs);\n     lastYear  = lastDate.getFullYear();\n     lastMonth = lastDate.getMonth();\n     lastDay   = lastDate.getDate();\n}\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"count\": {\n            \"type\": \"number\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "96f644b9-72bb-48da-9a72-51affc20095f"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944775213,
			"creator": "Rachel Levy",
			"description": "PS-23\nCount: BAR event detail-viewed for name=maps across a rolling 30 session window. \nResult schema includes \nCount: Integer\nLabel: \nIf 0 = maps-none\nIf 1-3 = maps-occasional\nIf 3+ = maps-heavy",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\" && \nevent.eventData.name.toLowerCase() === \"maps\") || \n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1509474475312,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "Radar Usage",
			"owner": null,
			"processor": "\r\nMAX_SESSIONS = 30;\r\nif (cache.sessions === undefined) {\r\n    trace(\"sessions undefined\");\r\n    cache.sessions = [];\r\n}\r\nelse{\r\n    trace(\"start with \" + cache.sessions.length + \" events in cache\");\r\n}\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\nsessions = sortEventsInBuckets(sessions, events, \"detail-viewed\", \"maps\");\r\n\/\/cleanup\r\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \r\n\/\/count\r\nvar eventsCount = countEventsInBuckets(sessions);\r\n\r\n\/\/ update cache\r\ntrace(\"update cache\");\r\ncache.sessions = sessions\r\n\r\n\/\/update result\r\ntrace(\"update result\");\r\nresult.count = eventsCount;\r\nif (eventsCount === 0){\r\n    result.label = \"maps-none\";\r\n}else if (eventsCount  <= 3){\r\n    result.label = \"maps-occasional\";\r\n}else{\r\n    result.label = \"maps-heavy\";\r\n}\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"count\": {\n            \"type\": \"number\"\n        },\n        \n        \"label\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "PRODUCTION",
			"uniqueId": "5472fee7-9089-4b43-bdd7-9a3b0f43c0e7"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944822014,
			"creator": "Rachel Levy",
			"description": "PS-27\nCalculate the average watched secs of autoplay video, starting to calculate after 10 video played.",
			"displayName": null,
			"enabled": false,
			"filter": "event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"auto\"",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1507032360942,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "VideoAutoplayAverageSecWatched",
			"owner": null,
			"processor": "if (cache.resultDate !== undefined) {\n\tresetStreamAfterDays(new Date(cache.resultDate),14);\n}\n\nif (cache.count === undefined) {\n\tcache.count = 0;\n} \n\nif (cache.total === undefined) {\n\tcache.total = 0;\n}\n\nif (cache.avrageWatchedSecs === undefined) {\n\tcache.avrageWatchedSecs = 0;\n}\n\nfor (var ev in events) {\n    try {\n\t    cache.count += 1;\n\t    cache.total += events[ev].eventData.watchedSecs;\n    } catch (err) {\n        trace(err.name + \":\" + err.message);\n    }    \n}\n\nif (cache.count > 0) {\n    cache.avrageWatchedSecs = cache.total\/cache.count; \n}\n\nif (cache.count >= 10) {\n    \n\tresult.avrageWatchedSecs = cache.avrageWatchedSecs;\n\tif (cache.resultDate === undefined) {\n\t    cache.resultDate = new Date().getTime();\n\t}    \n}\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"avrageWatchedSecs\": {\n            \"type\": \"number\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "PRODUCTION",
			"uniqueId": "ed895b09-f8d6-4fcb-be1e-aea49322b72b"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1506944869808,
			"creator": "Rachel Levy",
			"description": "PS-28\nFilter for BAR event video-played with either:\nplayMethod of \"user\" or \"next-video-auto\"\nplayMethod of \"auto\" AND autoplayClicked=true\n \nCount number of user-initiated video-played events by unique playlist name, over rolling 30 session window\nResult schema:\nRank ordered count of user-initiated video plays per playlist",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"auto\" && \r\nevent.eventData.autoplayClicked === true) \r\n|| (event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"user\")\r\n|| (event.name === \"video-played\" && event.eventData.playMethod.toLowerCase() === \"next-video-auto\")\r\n|| (event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Gil"
			],
			"lastModified": 1507032377698,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "Favorite Video Categories",
			"owner": null,
			"processor": "\r\nMAX_SESSIONS = 30;\r\nif (cache.sessions === undefined) {\r\n    cache.sessions = [];\r\n}\r\n\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\nsessions = sortVideoPlayedEvents(sessions, events);\r\n\/\/cleanup\r\nsessions = removeExtraBuckets(sessions, MAX_SESSIONS); \r\n\/\/count\r\nvar eventsSum = countEventsInBuckets(sessions);\r\n\r\nvar sortedCategoriesArr = sortEventsSum(eventsSum);\r\n\/\/ update cache\r\n\r\ncache.sessions = sessions;\r\n\/\/update result\r\n\r\nresult.playlistSum = sortedCategoriesArr;\r\n\r\n\/\/------------------ FUNCTIONS ----------------------\r\n\r\n\/\/ create the buckets\r\nfunction createBucketPerSessions(buckets, allEvents){\r\n    trace(\"createBucketPerSessions\");\r\n    for (var e in allEvents) {\r\n        if (allEvents[e].name === \"app-launch\"){\r\n            trace(\"event app launch\");\r\n            buckets.push({\r\n                date: allEvents[e].dateTime,\r\n                playList : {}\r\n            });\r\n        }  \r\n    }\r\n    return buckets\r\n}\r\n\r\n\/\/ sort the events after the buckets created\r\nfunction sortVideoPlayedEvents(sessionBuckets, allEvents)\r\n{\r\n    trace(\"sortVideoPlayedEvents\");\r\n    var sortedEvents = sessionBuckets;\r\n    for (var i in allEvents) {\r\n        try {\r\n            var currentEvent = allEvents[i];\r\n            if (currentEvent.name === \"video-played\"){\r\n                var eventDate = currentEvent.dateTime;\r\n                for (var j = sortedEvents.length -1 ; j >= 0; j--){\r\n                    if (sortedEvents[j].date < eventDate){\r\n                        \/\/ put in the correct playlist count\r\n                        trace(\"add to bucket number \" + j);\r\n                        var currentPlayList = currentEvent.eventData.playlist.toLowerCase();\r\n                        if (sortedEvents[j].playList[currentPlayList] === undefined){\r\n                            sortedEvents[j].playList[currentPlayList] = 1;\r\n                        } else{\r\n                            sortedEvents[j].playList[currentPlayList] = sortedEvents[j].playList[currentPlayList] + 1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } catch(err) {\r\n           trace(err.name + \":\" + err.message); \r\n        }\r\n    }\r\n    return sortedEvents;\r\n}\r\n\r\n\/\/count the events\r\nfunction countEventsInBuckets (buckets){\r\n    trace(\"countEventsInBuckets\");\r\n    var outputObj = {};\r\n    for (var j in buckets){\r\n        var bucket = buckets[j];\r\n        if (bucket !== undefined ) {\r\n            var oneBucketPlayList = bucket.playList;\r\n            \r\n            var oneBucketPlayListArr = Object.keys(oneBucketPlayList);\r\n\r\n            for (var p in oneBucketPlayListArr) {\r\n                var playListName = oneBucketPlayListArr[p];\r\n    \r\n                if (outputObj[playListName] === undefined) {\r\n                    outputObj[playListName] = oneBucketPlayList[playListName];\r\n                } else {\r\n                    outputObj[playListName] += oneBucketPlayList[playListName];\r\n                }\r\n            }            \r\n        }\r\n        else{\r\n            trace(\"buckets[j] = undefined\");\r\n        }\r\n    }\r\n\r\n    return outputObj;\r\n}\r\n\r\nfunction sortEventsSum(eventsSum) {\r\n    \r\n    var sortedArr = [];\r\n    \r\n    var eventsSumKeys = Object.keys(eventsSum);\r\n\r\n    for (var key in eventsSumKeys) {\r\n        var plName = eventsSumKeys[key];\r\n        var plCount = eventsSum[plName];\r\n        \r\n        sortedArr.push({\r\n            name: plName,\r\n            count : plCount\r\n        });\r\n    }\r\n    \r\n    sortedArr.sort(function(a, b){return b.count - a.count});\r\n    return sortedArr;\r\n}\r\n\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\n    \"properties\": {\n        \"playlistSum\": {\n            \"items\": {\n                \"properties\": {\n                    \"count\": {\n                        \"type\": \"integer\"\n                    }, \n                    \"name\": {\n                        \"type\": \"string\"\n                    }\n                }, \n                \"type\": \"object\"\n            }, \n            \"type\": \"array\"\n        }\n    },\n    \"type\": \"object\"\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "8f798ea0-4ad3-485c-b07c-78473f06b146"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1510133768232,
			"creator": "Esteban Zia",
			"description": "",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"video-played\") || \n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Rachel"
			],
			"lastModified": 1510145248372,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "Video",
			"owner": null,
			"processor": "MAX_SESSIONS = 5;\r\n\r\nif (cache.sessions === undefined) {\r\n    cache.sessions = [];\r\n} \r\n\r\nvar sessions = cache.sessions;\r\n\r\n\/\/ create the buckets\r\ntrace(\"createBucketPerSessions\");\r\nsessions = createBucketPerSessions(sessions, events);\r\n\/\/ sort the events after the buckets created\r\ntrace(\"sortEventsInBuckets\");\r\nsessions = sortEventsInBuckets(sessions, events, \"video-played\");\r\n\/\/count\r\n\r\nresult.countEventsPerSessionOne = countEventsInLastBuckets(sessions, 1);\r\nresult.countEventsPerSessionFive = countEventsInLastBuckets(sessions, 5);\r\n\r\nresult.CountActiveSessionOne = countBucketsWithEvents(sessions, 1);\r\nresult.CountActiveSessionFive = countBucketsWithEvents(sessions, 5);\r\n\r\ncache.sessions = removeExtraBuckets(sessions, MAX_SESSIONS);\r\n\/\/result.count = eventsCount;\r\n\r\n\/\/----------------\r\n\/\/count the number of events in the last #num buckets\r\nfunction countEventsInLastBuckets (buckets, num){\r\ntrace(\"countEventsInBuckets\");\r\n    var counter = 0;\r\n\tvar arrayLength = buckets.length;\r\n\ttrace(\"array length = \" + arrayLength)\r\n\tif (num > arrayLength){\r\n\t\tnum = 0;\r\n\t}\r\n    for (var j = arrayLength; j < arrayLength - num; j--) {\r\n        if (buckets[j] !== undefined ){\r\n            trace(\"events in session \" + j + \" = \" + buckets[j].eventcount);\r\n            counter = counter +  buckets[j].eventcount;\r\n        }\r\n        else{\r\n            trace(\"buckets[j] = undefined\");\r\n        }\r\n    }\r\n    trace(\"eventCount = \" + counter);\r\n    return counter;\r\n}\r\n\r\n\/\/count the number of buckets where  buckets[j].eventcount > 0 in the last #num buckets\r\nfunction countBucketsWithEvents(buckets, num){\r\ntrace(\"countEventsInBuckets\");\r\n    var counter = 0;\r\n\tvar arrayLength = buckets.length;\r\n\ttrace(\"array length = \" + arrayLength)\r\n\tif (num > arrayLength){\r\n\t\tnum = 0;\r\n\t}\r\n    for (var j = arrayLength; j < num; j--) {\r\n        trace(\"j = \" + j);\r\n        if (buckets[j] !== undefined ){\r\n            if (buckets[j].eventcount > 0){\r\n                counter++;\r\n            }\r\n        }\r\n    }\r\n    trace(\"eventCount = \" + counter);\r\n    return counter;\r\n}",
			"queueSizeKB": 1024,
			"resultsSchema": "{}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "171a45dc-6009-43e3-8880-810960e8745f"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1510561243747,
			"creator": "Esteban Zia",
			"description": "Debug stream - without filter or processor.",
			"displayName": null,
			"enabled": true,
			"filter": "true",
			"internalUserGroups": [
				"Rachel"
			],
			"lastModified": 1510561262645,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "All events",
			"owner": null,
			"processor": "false",
			"queueSizeKB": 1024,
			"resultsSchema": "{}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "ade278b3-e11c-4b93-ae85-f2acd3737688"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1510747127647,
			"creator": "Esteban Zia",
			"description": "",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"go-run\") ||\n(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"allergy\") || \n(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"maps\") || \n(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"road-condition\") || \n(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"daily\") ||\n(event.name === \"detail-viewed\"  && event.eventData.name!== 'undefined' && event.eventData.name.toLowerCase() === \"hourly\") ||\n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Adina",
				"Rachel"
			],
			"lastModified": 1511367720461,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "ML Detail Viewed By Session",
			"owner": null,
			"processor": "var MAX_SESSIONS = 5;\r\nvar EVENT_NAME = \"detail-viewed\";\r\nvar eventDataNames = [\"maps\",\"go-run\",\"allergy\",\"road-condition\",\"hourly\",\"daily\"];\r\n\r\nif (cache.sessions === undefined) {\r\n    cache.sessions = [];\r\n}\r\n\r\nvar sessions = cache.sessions;\r\n\r\ncalculatedSessionBuckets = prepareSessionBuckets (sessions, events);\r\n\r\njsonObjResult = arrayToJson(calculateResults(calculatedSessionBuckets));\r\n\r\njsonObjCache = [];\r\ncalculatedSessionBuckets.forEach(function (bucket){\r\n    jsonInfo = arrayToJson(bucket.info);\r\n    jsonObjCache.push({\r\n            date: bucket.date,\r\n    \t    info:jsonInfo\r\n        });\r\n});\r\n\r\nresult = jsonObjResult;\r\ncache.sessions = jsonObjCache;\r\n\r\n\r\nfunction prepareSessionBuckets(buckets, allevents){\r\n\t\/\/ create the buckets\r\n\tsessions = createEventBucketPerSessions(sessions, events);\r\n\t\/\/ sort the events after the buckets created\r\n\tsessions = calculateEventDataForSessions(sessions, events);\r\n\t\/\/cleanup\r\n\tsessions = removeExtraBuckets(sessions);\r\n\r\nreturn sessions;\r\n}\r\n\r\nfunction arrayToJson(array){\r\n    var thisEleObj = new Object();\r\n    if(typeof array == \"object\"){\r\n        for(var i in array){\r\n            var thisEle = arrayToJson(array[i]);\r\n            thisEleObj[i] = thisEle;\r\n        }\r\n    }else {\r\n        thisEleObj = array;\r\n    }\r\n    return thisEleObj;\r\n}\r\n\r\n\/\/ create the buckets\r\nfunction createEventBucketPerSessions(buckets, allEvents){\r\n    allEvents.forEach (function(event){\r\n        try{\r\n            if (event.name === \"app-launch\"){\r\n                info = [];\r\n                eventDataNames.forEach(function(dataName){\r\n    \t\t\t\tinfo[dataName] = {\r\n                            name: dataName,\r\n    \t\t\t\t        eventcount: 0,\r\n    \t\t\t\t\t\tminHour: undefined,\r\n    \t\t\t\t\t\tmaxHour: undefined,};\r\n                });\r\n    \t\t\tbuckets.push({\r\n    \t\t\t\t\tdate: event.dateTime,\r\n    \t\t\t\t\tinfo:info\r\n                        });\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return buckets;\r\n}\r\n\r\n\/\/ sort the events after the buckets\r\nfunction calculateEventDataForSessions(sessionBuckets, allEvents)\r\n{\r\n    allEvents.forEach(function(event){\r\n        try{\r\n            currentEventName = event.name;\r\n            if (currentEventName === EVENT_NAME){\r\n                eventDate = event.dateTime;\r\n                for (k = sessionBuckets.length -1 ; k >= 0; k--){\r\n                    currentSession = sessionBuckets[k];\r\n                    \/\/look for the relevant sessions bucket\r\n                   if (currentSession.date < eventDate){\r\n                       eventDataName = getEventDataName(event);\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                       if (eventDataName === undefined){\r\n                           break;\r\n                       }\r\n                       currentInfo = currentSession.info[eventDataName];\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                       if (currentInfo === undefined){\r\n                           break;\r\n                       }\r\n                       currentInfo.eventcount++;\r\n                       \/\/update min and max per session\r\n                       eventHour = new Date(eventDate).getHours();\r\n                      if (currentInfo.maxHour === undefined || eventHour > currentInfo.maxHour){\r\n                    \tcurrentInfo.maxHour = eventHour;\r\n                    }\r\n                    if (currentInfo.minHour === undefined || eventHour < currentInfo.minHour){\r\n                    \tcurrentInfo.minHour = eventHour;\r\n                    }\r\n                     break;  \r\n                  }\r\n                  \r\n              }\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return sessionBuckets;\r\n}\r\n\r\nfunction getEventDataName(event){\r\n    try{\r\n        return event.eventData.name;\r\n      }\r\n      catch(err){\r\n           trace(\"missing eventData.Name :\" + err.name + \":\" + err.message);\r\n           return undefined;\r\n      }\r\n}\r\n\r\n\/\/ cleanup\r\nfunction removeExtraBuckets(bucketArray){\r\n    var extraSessions = bucketArray.length - MAX_SESSIONS;\r\n    if (extraSessions > 0){\r\n        bucketArray.splice(0, extraSessions);\r\n    }\r\n    return bucketArray;\r\n}\r\n\r\nfunction calculateResults(sessions){\r\n    result = prepareResultArray();\r\n    \/\/ calculate for 5 sessions\r\n    sessions.forEach (function(session){\r\n        sessionInfo = session.info;\r\n        eventDataNames.forEach(function(eventType){\r\n          relevantResult = result[eventType].fiveSessions;\r\n          relevantSessionInfo = sessionInfo[eventType];\r\n          if (relevantSessionInfo.eventcount > 0){\r\n              relevantResult.count = relevantResult.count + relevantSessionInfo.eventcount;\r\n              relevantResult.countSession ++;\r\n              if (relevantResult.maxHour === undefined || relevantSessionInfo.maxHour > relevantResult.maxHour){\r\n            \t   relevantResult.maxHour = relevantSessionInfo.maxHour;\r\n            }\r\n            if (relevantResult.minHour === undefined || relevantSessionInfo.minHour > relevantResult.minHoure){\r\n            \t   relevantResult.minHour = relevantSessionInfo.minHour;\r\n            }\r\n          }\r\n       }); \r\n    });\r\n    eventDataNames.forEach(function(eventType){\r\n       relevantResult = result[eventType].fiveSessions;\r\n       relevantResult.share = relevantResult.countSession\/sessions.length;\r\n    });\r\n    \r\n    \/\/ calculate for one session\r\n    lastSessionInfo = sessions[sessions.length-1].info;\r\n    eventDataNames.forEach(function(eventType){\r\n       relevantResult = result[eventType].lastSession;\r\n       relevantResult.count = lastSessionInfo[eventType].eventcount;\r\n       relevantResult.maxHour = lastSessionInfo[eventType].maxHour;\r\n       relevantResult.minHour = lastSessionInfo[eventType].minHour;\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction prepareResultArray(){\r\n    result = [];\r\n    eventDataNames.forEach(function(dataName){\r\n        result[dataName] = {\r\n            lastSession: {\r\n                count: 0,\r\n                maxHour: undefined,\r\n                minHour: undefined\r\n            },\r\n            fiveSessions: {\r\n                count: 0,\r\n                countSession: 0,\r\n                share: 0,\r\n                maxHour: undefined,\r\n                minHour: undefined\r\n            }};\r\n       });\r\n       return result;\r\n    }\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\r\n\t\"properties\": {\r\n\t\t\"maps\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"allergy\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"road-condition\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"hourly\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\"daily\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\t\t\r\n\t\t\"gorun\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"type\": \"object\"\r\n\r\n\r\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "70144d3c-a568-402f-a004-65bed985cf3d"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1511085198614,
			"creator": "Esteban Zia",
			"description": "",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"go-run\") ||\n(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"allergy\") || \n(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"maps\") || \n(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"road-condition\") || \n(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"daily\") ||\n(event.name === \"detail-viewed\"  && event.eventData.name.toLowerCase() === \"hourly\") ||\n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Adina",
				"Rachel"
			],
			"lastModified": 1511684365435,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "ML Detail Viewed",
			"owner": null,
			"processor": "\r\nvar MAX_SESSIONS = 5;\r\nvar MAX_DAYS = 28;\r\nvar EVENT_NAME = \"detail-viewed\";\r\nvar eventDataNames = [\"maps\",\"go-run\",\"allergy\",\"road-condition\",\"hourly\",\"daily\"];\r\n\r\nif (cache.sessions === undefined) {\r\n    cache.sessions = [];\r\n}\r\nvar sessions = cache.sessions;\r\n\r\nif (cache.days === undefined) {\r\n    cache.days = [];\r\n}\r\nvar days = cache.days;\r\n\r\ncalculatedSessionBuckets = prepareBuckets (sessions, events, true);\r\ncalculatedDayBuckets = prepareBuckets (days, events, false);\r\n\/\/trace(\"calculatedDayBuckets size\" + calculatedDayBuckets.length);\r\n\r\ntmpResults = calculateResults(calculatedSessionBuckets, calculatedDayBuckets);\r\n\r\njsonObjResult = arrayToJson(tmpResults);\r\nresult = jsonObjResult;\r\nupdateCache(calculatedSessionBuckets, calculatedDayBuckets);\r\n\r\nfunction updateCache(calculatedSessionBuckets, calculatedDayBuckets){\r\n    jsonObjCache = [];\r\n    calculatedSessionBuckets.forEach(function (bucket){\r\n    jsonInfo = arrayToJson(bucket.info);\r\n    jsonObjCache.push({\r\n            date: bucket.date,\r\n    \t    info:jsonInfo\r\n        });\r\n    });\r\n    cache.sessions = jsonObjCache;\r\n    \/\/----------------------------\r\n    jsonDayObjCache = [];\r\n    calculatedDayBuckets.forEach(function (bucket){\r\n    jsonInfo = arrayToJson(bucket.info);\r\n    jsonDayObjCache.push({\r\n            date: bucket.date,\r\n    \t    info:jsonInfo\r\n        });\r\n    });\r\n    cache.days = jsonDayObjCache;\r\n}\r\n\r\nfunction prepareBuckets(buckets, allevents, bySession){\r\n\t\/\/ create the buckets\r\n\tbuckets = createEventBucket(buckets, events, bySession);\r\n\t\/\/ sort the events after the buckets created\r\n\tbuckets = calculateEventDataForSessions(buckets, events);\r\n\t\/\/cleanup\r\n\tbuckets = removeExtraBuckets(buckets, bySession);\r\n\r\nreturn buckets;\r\n}\r\n\r\nfunction arrayToJson(array){\r\n    var thisEleObj = new Object();\r\n    if(typeof array == \"object\"){\r\n        for(var i in array){\r\n            var thisEle = arrayToJson(array[i]);\r\n            thisEleObj[i] = thisEle;\r\n        }\r\n    }else {\r\n        thisEleObj = array;\r\n    }\r\n    return thisEleObj;\r\n}\r\n\r\n\/\/ create the buckets if bySession == false, will create buckets by days.\r\nfunction createEventBucket(buckets, allEvents, bySession){\r\n    trace(\"bySession = \" + bySession + \"buckets.length = \" + buckets.length);\r\n    if (buckets === undefined || buckets.length === 0){\r\n        lasttimeStamp = 0;\r\n    }\r\n    else{\r\n        lasttimeStamp = buckets[buckets.length-1].date;\r\n    }\r\n    if (bySession === undefined){\r\n        bySession = true;\r\n    }\r\n    \/\/trace(\"lasttimeStamp = \" + lasttimeStamp);\r\n    allEvents.forEach (function(event){\r\n        try{\r\n            if (event.name === \"app-launch\"){\r\n                if (bySession || (!bySession && (daysBetween(lasttimeStamp, event.dateTime) > 0))){\r\n                    lasttimeStamp = event.dateTime;\r\n                    info = [];\r\n                    eventDataNames.forEach(function(dataName){\r\n                        info[dataName] = {\r\n                                name: dataName,\r\n                                eventcount: 0,\r\n                                minHour: -1,\r\n                                maxHour: -1,};\r\n                    });\r\n                    buckets.push({\r\n                            date: event.dateTime,\r\n                            info:info\r\n                            });\r\n                }\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return buckets;\r\n}\r\n\r\n\/\/ sort the events after the buckets\r\nfunction calculateEventDataForSessions(buckets, allEvents)\r\n{\r\n    allEvents.forEach(function(event){\r\n        try{\r\n            currentEventName = event.name;\r\n            if (currentEventName === EVENT_NAME){\r\n                eventDate = event.dateTime;\r\n                for (k = buckets.length -1 ; k >= 0; k--){\r\n                    currentSession = buckets[k];\r\n                    \/\/look for the relevant sessions bucket\r\n                   if (currentSession.date < eventDate){\r\n                       eventDataName = event.eventData.name;\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                       if (eventDataName === undefined){\r\n                           break;\r\n                       }\r\n                       currentInfo = currentSession.info[eventDataName];\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                       if (currentInfo === undefined){\r\n                           break;\r\n                       }\r\n                       currentInfo.eventcount++;\r\n                       \/\/update min and max per session\r\n                       eventHour = new Date(eventDate).getHours();\r\n                      if (currentInfo.maxHour === -1 || eventHour > currentInfo.maxHour){\r\n                    \tcurrentInfo.maxHour = eventHour;\r\n                    }\r\n                    if (currentInfo.minHour === -1 || eventHour < currentInfo.minHour){\r\n                    \tcurrentInfo.minHour = eventHour;\r\n                    }\r\n                     break;  \r\n                  }\r\n                  \r\n              }\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return buckets;\r\n}\r\n\r\nfunction daysBetween (timeStamp1, timeStamp2){\r\n     oneDay = 60*60*1000*24;\r\n     try{\r\n        return Math.floor(Math.abs(timeStamp2-timeStamp1)\/oneDay);\r\n     }\r\n    catch(err){\r\n        return 0;\r\n        trace(\"cant calculate days between\" + err.name + \":\" + err.message);\r\n    }\r\n}\r\n\r\n\/\/ cleanup\r\nfunction removeExtraBuckets(bucketArray, bySession){\r\n    \r\n    var extraSessions = 0;\r\n    if(bySession){\r\n        extraSessions = bucketArray.length - MAX_SESSIONS;\r\n    }\r\n    \/\/ remove extra days\r\n    else{\r\n        if (bucketArray.length < 2)\r\n        {\r\n            return bucketArray;\r\n        }\r\n        lasttimeStamp = (bucketArray[bucketArray.length-1]).date;\r\n        for (i = bucketArray.length-1; i--; i <= 0){\r\n            trace(\"i = \" + i + \"current TS = \" + new Date (bucketArray[i].date) + \" lasttimeStamp = \" + new Date (lasttimeStamp));\r\n            \/\/document.writeln(\"Days between = \" + daysBetween(lasttimeStamp, bucketArray[i].date));\r\n            if (daysBetween(lasttimeStamp, bucketArray[i].date) > MAX_DAYS){\r\n                extraSessions = i+1;\r\n                trace(\"i = \" + i + \" extraSessions = \" + extraSessions);\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n    if (extraSessions > 0){\r\n        trace(\"splice bySession = \" + bySession + \" Extra = \" + extraSessions);\r\n        bucketArray.splice(0, extraSessions);\r\n    }\r\n    return bucketArray;\r\n}\r\n\r\nfunction calculateResults(sessions, days){\r\n    result = prepareResultArray();\r\n    \/\/ calculate for 5 sessions\r\n    sessions.forEach (function(bucket){\r\n        sessionInfo = bucket.info;\r\n        eventDataNames.forEach(function(eventType){\r\n          relevantResult = result[eventType].fiveSessions;\r\n          analyseBucket(sessionInfo[eventType],result[eventType].fiveSessions);\r\n       }); \r\n    });\r\n    eventDataNames.forEach(function(eventType){\r\n       relevantResult = result[eventType].fiveSessions;\r\n       relevantResult.share = relevantResult.countSession\/sessions.length;\r\n    });\r\n    \/\/ calculate for 28 days\r\n    trace(\"befor calc days \" + days.length);\r\n    days.forEach (function(bucket){\r\n        dayInfo = bucket.info;\r\n        eventDataNames.forEach(function(eventType){\r\n          relevantResult = result[eventType].days;\r\n          analyseBucket(dayInfo[eventType],result[eventType].days);\r\n       }); \r\n    });\r\n    eventDataNames.forEach(function(eventType){\r\n       relevantResult = result[eventType].days;\r\n       lastDay = days[days.length -1];\r\n       totalDays = 1;\r\n       if (lastDay !== undefined)\r\n       {\r\n            totalDays = daysBetween(days[0].date,lastDay.date);\r\n            if (totalDays < 1){\r\n                totalDays =1;\r\n            }\r\n       }\r\n       relevantResult.share = relevantResult.countSession\/totalDays;\r\n    });\r\n        \r\n    \/\/ calculate for one session\r\n    lastSession = sessions[sessions.length-1];\r\n    if (lastSession !== undefined){\r\n        lastSessionInfo = lastSession.info;\r\n        eventDataNames.forEach(function(eventType){\r\n            relevantResult = result[eventType].lastSession;\r\n            relevantResult.count = lastSessionInfo[eventType].eventcount;\r\n            relevantResult.maxHour = lastSessionInfo[eventType].maxHour;\r\n            relevantResult.minHour = lastSessionInfo[eventType].minHour;\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction analyseBucket(bucketInfo,relevantResult){\r\n          if (bucketInfo.eventcount > 0){\r\n              relevantResult.count = relevantResult.count + bucketInfo.eventcount;\r\n              relevantResult.countSession ++;\r\n              if (relevantResult.maxHour === -1 || bucketInfo.maxHour > relevantResult.maxHour){\r\n            \t   relevantResult.maxHour = bucketInfo.maxHour;\r\n            }\r\n            if (relevantResult.minHour === -1 || bucketInfo.minHour > relevantResult.minHoure){\r\n            \t   relevantResult.minHour = bucketInfo.minHour;\r\n            }\r\n          }\r\n}\r\n\r\nfunction prepareResultArray(){\r\n    result = [];\r\n    eventDataNames.forEach(function(dataName){\r\n        result[dataName] = {\r\n            lastSession: {\r\n                count: 0,\r\n                maxHour: -1,\r\n                minHour: -1\r\n            },\r\n            fiveSessions: {\r\n                count: 0,\r\n                countSession: 0,\r\n                share: 0,\r\n                maxHour: -1,\r\n                minHour: -1\r\n            },\r\n            days: {\r\n                count: 0,\r\n                countSession: 0,\r\n                share: 0,\r\n                maxHour: -1,\r\n                minHour: -1\r\n            }\r\n        };\r\n       });\r\n       return result;\r\n    }\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{\r\n\t\"properties\": {\r\n\t\t\"maps\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"allergy\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"road-condition\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\t\t\"hourly\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\r\n\"daily\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t},\t\t\r\n\t\t\"gorun\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"lastSession\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"fiveSessions\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t},\r\n\t\t\t\t\"days\": {\r\n\t\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\t\"count\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"countSession\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"share\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"maxHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"minHour\": {\r\n\t\t\t\t\t\t\t\"type\": \"integer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"type\": [\"object\"]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"type\": \"object\"\r\n\t\t}\r\n\t},\r\n\t\"type\": \"object\"\r\n\r\n\r\n}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "81f74cef-c6e8-4580-956b-fa6a36af001e"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1511427759540,
			"creator": "Esteban Zia",
			"description": "",
			"displayName": null,
			"enabled": false,
			"filter": "false",
			"internalUserGroups": [
			],
			"lastModified": 1511427759540,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "EmptyStream",
			"owner": null,
			"processor": "false",
			"queueSizeKB": 1024,
			"resultsSchema": "{}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "2f3acb6d-148c-4c31-97a5-5d13c86a3671"
		},
		{
			"cacheSizeKB": null,
			"creationDate": 1511436892923,
			"creator": "Esteban Zia",
			"description": "",
			"displayName": null,
			"enabled": true,
			"filter": "(event.name === \"tile-clicked\") || (event.name === \"tile-viewed\") ||\n(event.name === \"app-launch\" && \"fetch\" !== event.eventData.method.toLowerCase());",
			"internalUserGroups": [
				"Rachel"
			],
			"lastModified": 1511859838676,
			"maxQueuedEvents": null,
			"minAppVersion": "9.2",
			"name": "ML Tile",
			"owner": null,
			"processor": "\r\nvar MAX_SESSIONS = 10;\r\nvar MAX_DAYS = 28;\r\nvar TILE_CLICKED = \"tile-clicked\";\r\nvar TILE_VIEWED = \"tile-viewed\";\r\nvar eventDataNameArray = [];\r\n\r\n\r\nif (cache.sessions === undefined) {\r\n    cache.sessions = [];\r\n}\r\nvar sessions = cache.sessions;\r\n\r\nif (cache.days === undefined) {\r\n    cache.days = [];\r\n}\r\n\r\nvar days = cache.days;\r\n\r\ncalculatedSessionBuckets = prepareBuckets (sessions, events, true);\r\ncalculatedDayBuckets = prepareBuckets (days, events, false);\r\n\/\/trace(\"calculatedDayBuckets size\" + calculatedDayBuckets.length);\r\n\r\ntmpResults = calculateResults(calculatedSessionBuckets, calculatedDayBuckets);\r\n\r\njsonObjResult = arrayToJson(tmpResults);\r\nresult = jsonObjResult;\r\nupdateCache(calculatedSessionBuckets, calculatedDayBuckets);\r\n\r\nfunction updateCache(calculatedSessionBuckets, calculatedDayBuckets){\r\n    jsonObjCache = [];\r\n    calculatedSessionBuckets.forEach(function (bucket){\r\n    jsonInfo = arrayToJson(bucket.info);\r\n    jsonObjCache.push({\r\n            date: bucket.date,\r\n    \t    info:jsonInfo\r\n        });\r\n    });\r\n    cache.sessions = jsonObjCache;\r\n    \/\/----------------------------\r\n    jsonDayObjCache = [];\r\n    calculatedDayBuckets.forEach(function (bucket){\r\n    jsonInfo = arrayToJson(bucket.info);\r\n    jsonDayObjCache.push({\r\n            date: bucket.date,\r\n    \t    info:jsonInfo\r\n        });\r\n    });\r\n    cache.days = jsonDayObjCache;\r\n}\r\n\r\nfunction prepareBuckets(buckets, allevents, bySession){\r\n\t\/\/ create the buckets\r\n\tbuckets = createEventBucket(buckets, events, bySession);\r\n\t\/\/ sort the events after the buckets created\r\n\tbuckets = calculateEventDataForSessions(buckets, events);\r\n\t\/\/cleanup\r\n\tbuckets = removeExtraBuckets(buckets, bySession);\r\n\r\nreturn buckets;\r\n}\r\n\r\nfunction arrayToJson(array){\r\n    var thisEleObj = new Object();\r\n    if(typeof array == \"object\"){\r\n        for(var i in array){\r\n            var thisEle = arrayToJson(array[i]);\r\n            thisEleObj[i] = thisEle;\r\n        }\r\n    }else {\r\n        thisEleObj = array;\r\n    }\r\n    return thisEleObj;\r\n}\r\n\r\n\/\/ create the buckets if bySession == false, will create buckets by days.\r\nfunction createEventBucket(buckets, allEvents, bySession){\r\n    if (buckets === undefined || buckets.length === 0){\r\n        lasttimeStamp = 0;\r\n    }\r\n    else{\r\n        lasttimeStamp = buckets[buckets.length-1].date;\r\n    }\r\n    if (bySession === undefined){\r\n        bySession = true;\r\n    }\r\n    \/\/trace(\"lasttimeStamp = \" + lasttimeStamp);\r\n    allEvents.forEach (function(event){\r\n        try{\r\n            if (event.name === \"app-launch\"){\r\n                if (bySession || (!bySession && (daysBetween(lasttimeStamp, event.dateTime) > 0))){\r\n                    lasttimeStamp = event.dateTime;\r\n                    info = [];\r\n                    eventDataNameArray.forEach(function(dataName){\r\n                        info[dataName] = createInfoObject(dataName);\r\n                    });\r\n                    buckets.push({\r\n                            date: event.dateTime,\r\n                            info:info\r\n                            });\r\n                }\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return buckets;\r\n}\r\n\r\nfunction createInfoObject(dataName){\r\n    return {\r\n                  name: dataName,\r\n                  clickedCount: 0,\r\n                  viewedCount: 0,\r\n        \r\n    };\r\n}\r\n\r\n\/\/ sort the events after the buckets\r\nfunction calculateEventDataForSessions(buckets, allEvents)\r\n{\r\n    allEvents.forEach(function(event){\r\n        try{\r\n            currentEventName = event.name;\r\n            if (currentEventName === TILE_CLICKED || currentEventName === TILE_VIEWED){\r\n                trace(\"currentEventName = \" + currentEventName);\r\n                eventDate = event.dateTime;\r\n                for (k = buckets.length -1 ; k >= 0; k--){\r\n                    currentSession = buckets[k];\r\n                    \/\/look for the relevant sessions bucket\r\n                   if (currentSession.date < eventDate){\r\n                       eventDataName = event.eventData.name;\r\n                        trace(\"eventDataName = \" + eventDataName);\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                       if (eventDataName === undefined){\r\n                           break;\r\n                       }\r\n                       currentInfo = currentSession.info[eventDataName];\r\n                       \/\/ shouldn't happend, can't continue with this event.\r\n                      if (currentInfo === undefined){\r\n                          trace(\"currentInfo === undefined\");\r\n                           currentSession.info[eventDataName] = createInfoObject(eventDataName);\r\n                           currentInfo = currentSession.info[eventDataName];\r\n                           eventDataNameArray.push(eventDataName);\r\n                       }\r\n\t\t\t\t\t   if (currentEventName === TILE_CLICKED){\r\n\t\t\t\t\t\t   currentInfo.clickedCount ++;\r\n\t\t\t\t\t   }\r\n\t\t\t\t\t   else if (currentEventName === TILE_VIEWED){\r\n\t\t\t\t\t\t   currentInfo.clickedViewed ++;\r\n\t\t\t\t\t   }\r\n                       \r\n                     break;  \r\n                  }\r\n                  \r\n              }\r\n            }\r\n        }\r\n        catch(err){\r\n            trace(err.name + \":\" + err.message);\r\n        }\r\n    });\r\n    return buckets;\r\n}\r\n\r\nfunction daysBetween (timeStamp1, timeStamp2){\r\n     oneDay = 60*60*1000*24;\r\n     try{\r\n        return Math.floor(Math.abs(timeStamp2-timeStamp1)\/oneDay);\r\n     }\r\n    catch(err){\r\n        return 0;\r\n        trace(\"cant calculate days between\" + err.name + \":\" + err.message);\r\n    }\r\n}\r\n\r\n\/\/ cleanup\r\nfunction removeExtraBuckets(bucketArray, bySession){\r\n    \r\n    var extraSessions = 0;\r\n    if(bySession){\r\n        extraSessions = bucketArray.length - MAX_SESSIONS;\r\n    }\r\n    \/\/ remove extra days\r\n    else{\r\n        if (bucketArray.length < 2)\r\n        {\r\n            return bucketArray;\r\n        }\r\n        lasttimeStamp = (bucketArray[bucketArray.length-1]).date;\r\n        for (i = bucketArray.length-1; i--; i <= 0){\r\n            if (daysBetween(lasttimeStamp, bucketArray[i].date) > MAX_DAYS){\r\n                extraSessions = i+1;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n    if (extraSessions > 0){\r\n        trace(\"splice bySession = \" + bySession + \" Extra = \" + extraSessions);\r\n        bucketArray.splice(0, extraSessions);\r\n    }\r\n    return bucketArray;\r\n}\r\n\r\nfunction calculateResults(sessions, days){\r\n    result = prepareResultArray1();\r\n    \/\/ calculate for 5 sessions\r\n    sessions.forEach (function(bucket){\r\n        sessionInfo = bucket.info;\r\n        eventDataNameArray.forEach(function(eventType){\r\n          analyseBucket(sessionInfo[eventType],result[eventType].fiveSessions);\r\n       }); \r\n    });\r\n\r\n    \/\/ calculate for 28 days\r\n    trace(\"befor calc days \" + days.length);\r\n    days.forEach (function(bucket){\r\n        dayInfo = bucket.info;\r\n        eventDataNameArray.forEach(function(eventType){\r\n          analyseBucket(dayInfo[eventType],result[eventType].days);\r\n       }); \r\n    });\r\n        \r\n    \/\/ calculate for one session\r\n    lastSession = sessions[sessions.length-1];\r\n    if (lastSession !== undefined){\r\n        lastSessionInfo = lastSession.info;\r\n        eventDataNameArray.forEach(function(eventType){\r\n            analyseBucket(dayInfo[eventType],result[eventType].lastSession);\r\n        });\r\n    }\r\n\t\r\n\t\/\/ calculate CTR\r\n\teventDataNameArray.forEach(function(eventType){\r\n\t\t\/\/ 5 sessions\r\n       relevantResult = result[eventType].fiveSessions;\r\n       relevantResult.CTR = relevantResult.clickedCount\/relevantResult.viewedCount\r\n\t   \r\n\t   relevantResult = result[eventType].days;\r\n       relevantResult.CTR = relevantResult.clickedCount\/relevantResult.viewedCount\r\n\t   \r\n\t   relevantResult = result[eventType].lastSession;\r\n       relevantResult.CTR = relevantResult.clickedCount\/relevantResult.viewedCount\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction analyseBucket(bucketInfo,relevantResult){\r\n    if (bucketInfo == undefined){\r\n        return;\r\n    }\r\n      if (bucketInfo.clickedCount > 0){\r\n          relevantResult.clickedCount = relevantResult.clickedCount + bucketInfo.clickedCount;\r\n      }\r\n\t  if (bucketInfo.viewedCount > 0){\r\n          relevantResult.viewedCount = relevantResult.viewedCount + bucketInfo.viewedCount;\r\n      }\r\n}\r\n\r\nfunction prepareResultArray1(){\r\n    result = [];\r\n    eventDataNameArray.forEach(function(dataName){\r\n        result[dataName] = {\r\n            lastSession: {\r\n                clickedCount: 0,\r\n                viewedCount: 0,\r\n                CTR: -1 \/\/ clickedCount\/viewedCount\r\n            },\r\n            fiveSessions: {\r\n                clickedCount: 0,\r\n                viewedCount: 0,\r\n                CTR: -1 \/\/ clickedCount\/viewedCount\r\n            },\r\n            days: {\r\n                clickedCount: 0,\r\n                viewedCount: 0,\r\n                CTR: -1 \/\/ clickedCount\/viewedCount\r\n            }\r\n        };\r\n       });\r\n       return result;\r\n    }\r\n",
			"queueSizeKB": 1024,
			"resultsSchema": "{}",
			"rolloutPercentage": 100.0,
			"seasonId": "d0915024-d12a-471f-9b35-c78cad872bb1",
			"stage": "DEVELOPMENT",
			"uniqueId": "51949fc0-b2d3-494c-bc77-31aa8f389b79"
		}
	]
}